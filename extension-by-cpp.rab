= Improve extension API\n(('note:拡張ライブラリーAPIの改良'))

: subtitle
   C++ as better language for extension\n
   (('note:C++で拡張ライブラリーを開発しやすくする'))
: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2017
: date
   2017-09-18
: allotted-time
   35m
: theme
   .

= Ad1: Silver sponsor

  # img
  # src = images/clear-code-silver-sponsor.png
  # relative_height = 100
  # reflect_ratio = 0.1

== Slide properties

: enable-title-on-image
   false

= Ad2: Red Data Tools

  * Project that provides data processing tools for Ruby\n
    (('note:Ruby用のデータ処理ツール群を提供するプロジェクト'))
    * https://red-data-tools.github.io/
  * Workshop in afternoon break at the 2nd day (today!)\n
    (('note:2日目（今日！）の午後休憩中にワークショップがあるよ！'))

= Ad3: OSS Gate

  * Project that increases people who join OSS development\n
    (('note:OSSの開発に継続的に参加する人を継続的に増やす取り組み'))
    * https://oss-gate.github.io/

= Ad3: OSS Gate

  * Ruby is an OSS\n
    (('note:RubyもOSS'))
    * OSS Gate wants to increase people to join Ruby itself and RubyGems development!\n
      (('note:OSS GateではRuby本体の開発や各種RubyGemの開発に参加する人も増やしたい！'))

= Ad3: OSS Gate

  * Now, works on Tokyo, Sapporo, Osaka and Kyoto\n
    (('note:現在は東京・札幌・大阪・京都で活動中'))
    * If you live at one of them, join "OSS Gate workshop"!\n
      (('note:これらの地域に住んでいる人は「OSS Gateワークショップ」に参加しよう！'))

= Ad3: OSS Gate

  * Wants to work on Hiroshima and other areas all over the world!\n
    (('note:広島や世界中のいろんな地域で活動したい！'))
    * If you're interested in increasing people who join OSS development, talk to me!\n
      (('note:OSSの開発に参加する人が増えることに興味のある人は私に声をかけて！'))

= Abstract\n(('note:概要'))

  * Show some approaches to write extensions\n
    (('note:拡張ライブラリーの書き方をいくつか紹介'))
  * Describe C++ approach deeply\n
    (('note:C++を使った方法の詳細を説明'))
    * Because I recommend the approach!\n
      (('note:C++を使った方法が一番いいと思っているから！'))

= Extension\n(('note:拡張ライブラリー'))

  * Ruby library implemented in C\n
    (('note:Cで実装されたRubyのライブラリー'))
    * Or in other languages such as\n
      C++ and Objective-C\n
      (('note:C++やObjective-Cなど他の言語での実装でもよい'))

= Ruby API

  # coderay ruby

  class Sample
    def hello
      "Hello"
    end
  end

= C API

  # coderay c

  #include <ruby.h>

  static VALUE
  rb_sample_hello(VALUE self)
  {
    return rb_str_new_static("Hello");
  }

  void
  Init_sample(void)
  {
    VALUE sample = rb_define_class("Sample", rb_cObject);
    rb_define_method(sample, "hello", rb_sample_hello, 0);
  }

= C++ API

  # coderay cpp

  #include <ruby.hpp>

  void
  Init_sample(void)
  {
    rb::Class("Sample", rb_cObject).
      define_method("hello",
                    [](VALUE self) {
                      return rb_str_new_static("Hello");
                    });
  }

= Ruby API\nwithout syntax sugar\n(('note:シンタックスシュガーなし'))

  # coderay ruby

  Sample = Class.new do
    define_method(:hello) do
      "Hello"
    end
  end

= C++ API (reprise)\n(('note:（再掲）'))

  # coderay cpp

  // Similar to Ruby API without syntax sugar!
  // シンタックスシュガーなしのRuby APIと似ている！
  rb::Class("Sample", rb_cObject).
    define_method("hello",
                  [](VALUE self) {
                    return rb_str_new_static("Hello");
                  });

= Why is extension needed?\n(('note:拡張ライブラリーが必要な時'))

  * Performance(('note:（性能）'))
  * Integration with existing libraries implemented in other languages such as C\n
    (('note:他言語で実装されたライブラリーを利用する'))
    * It's called as binding\n
      (('note:バインディングと呼ばれているもの'))

= Performance\n(('note:性能'))

  * Extension is fast\n
    (('note:拡張ライブラリーは速い'))
    * Because C/C++ is fast\n
      (('note:C/C++が速いから'))
    * Especially loop\n
      (('note:特にループするやつが速い'))

= Loop: Sum

  # coderay ruby

  numbers = (1..100000).to_a
  # Ruby level loop: 25.1ms
  numbers.inject(&:+)
  # C level loop:     0.5ms
  # 50x faster（50倍速い）
  numbers.sum

= Target use case\n(('note:よくある使い方'))

  * Mostly write your script in Ruby\n
    (('note:ほとんどはRubyで実装'))
  * Implement only bottle neck as extension\n
    (('note:ボトルネックだけ拡張ライブラリーとして実装'))

= e.g.: Machine Learning\n(('note:例：機械学習'))

  * Many array/matrix operations\n
    (('note:配列・行列に対する演算が多い'))

= Writing ext is difficult\n(('note:拡張ライブラリーの実装は難しい'))

  * Require C knowledge\n
    (('note:Cの知識が必要'))
  * Require Ruby C API knowledge\n
    (('note:RubyのC APIの知識が必要'))

(('tag:center'))
Most Rubyists don't have them\n
(('note:多くのRubyistはこれらの知識がない'))

= I don't want to learn...\n(('note:そんなの知りたくない…'))

You should learn👐\n
(('note:(if you want more performance)'))\n
(('note:性能が欲しいなら知っておくべき'))

# 🎒
# 🏫

= Easy to write ext\n(('note:拡張ライブラリーを簡単に実装する方法'))

  * Assumptions(('note:（前提）'))
    * Ruby knowledge(('note:（Rubyの知識）'))
    * Ruby C API knowledge(('note:（RubyのC APIの知識）'))
  * Improve Ruby C API(('note:（RubyのC APIを改良）'))
    * Ruby C API isn't bad but has some verbosities because of C\n
      (('note:RubyのC APIは悪くないんだけどCなので冗長'))

= Approaches(('note:（実現方法）'))

  * Extend language to support writing extension\n
    (('note:拡張ライブラリーを書けるように言語を拡張'))
  * Based on not C language\n
    (('note:C以外の言語を使う'))
    * There are many better C languages\n
      (('note:Cより便利な言語はいろいろある'))
  * Provide convenient API\n
    (('note:便利APIを提供'))

= Extend language\n(('note:言語を拡張'))

  * Rubex: Extended Ruby\n
    (('note:Rubex：Rubyを拡張'))
  * Cython: Extended Python\n
    (('note:Cython：Pythonを拡張'))

= How to run\n(('note:動かし方'))

  * Compile code for extended language to C\n
    (('note:拡張言語で書かれたコードをCにコンパイル'))
  * Build compiled C code\n
    (('note:コンパイルされたCコードをビルド'))
  * Load the built extension\n
    (('note:ビルドした拡張ライブラリーを読み込む'))

= Extended syntax\n(('note:拡張された構文'))

  * Type information\n
    (('note:型情報を書ける'))
  * C code snippet\n
    (('note:Cのコードを書ける'))

= How to run: Rubex\n(('note:Rubexの動かし方'))

  # coderay ruby
  # fibonacci.rubex
  class Fibonacci
    # "int" is type information
    def compute(int n)
      # ...
    end
  end

= How to run: Rubex\n(('note:Rubexの動かし方'))

  # coderay console
  % rubex fibonacci.rubex
  % cd fibonacci
  % ruby extconf.rb
  % make

= How to run: Rubex\n(('note:Rubexの動かし方'))

  # coderay ruby
  require_relative "fibonacci.so"
  p Fibonacci.new.compute(100)

= Extend language: Pros1\n(('note:拡張言語：長所1'))

(('tag:center'))
Friendly syntax for base language users\n
(('note:ベースの言語のユーザーにはなじみやすい構文'))

  * Because most syntaxes are same\n
    (('note:構文の大部分は同じだから'))

= Extend language: Pros\n(('note:拡張言語：長所2'))

(('tag:center'))
Easy to migrate from base lang\n
(('note:ベースの言語からの移行が容易'))

  * Because upper compatibility\n
    (('note:上位互換だから'))
  * Code for base language works without modification\n
    (('note:ベースの言語で書かれたコードは変更なしで動く'))

= Extend language: Pros\n(('note:拡張言語：長所3'))

(('tag:center'))
Don't require large C knowledge\n
(('note:そんなにCの知識は必要ない'))

  * Most codes can be written with base language knowledge\n
    (('note:コードの大部分はベースの言語の知識で書ける'))

= Extend language: Cons1\n(('note:拡張言語：短所1'))

(('tag:center'))
You realize that it's not friendly syntax when you use it\n
(('note:使うとそんなになじみやすい文法ではないと気づく'))

  * Small differences will confuse you\n
    (('note:小さな違いがいろいろあってわかりにくい'))

= Extend language: Cons2\n(('note:拡張言語：短所2'))

(('tag:center'))
Difficult to debug\n
(('note:デバッグが難しい'))

  * Need base language, extend language and C knowledge\n
    (('note:ベースの言語の知識も拡張言語の知識もCの知識も必要'))

(('note:Cython has GDB integration to solve this problem'))\n
(('note:Cythonはこの問題を解決するためにGDB用の便利機能を提供'))

= Extend language: Cons3\n(('note:拡張言語：短所2'))

(('tag:center'))
Need many works to maintain\n
(('note:(For maintainers, not for users)'))\n
(('note:（ユーザーではなくメンテナーが）メンテナンスが大変'))

  * Base language introduces a new syntax then extend language should implement it\n
    (('note:ベースの言語が新しい構文を導入→拡張言語でも実装'))

= Based on not C language\n(('note:C言語以外をベースにする'))

  * JRuby: Java + Ruby
  * Helix: Rust + Ruby
  * crystal_ruby: Crystal + Ruby

= How to run: JRuby\n(('note:JRubyでの動かし方'))

  # coderay java
  // Fibonacci.java
  public class Fibonacci {
    public long[] compute(int n) {
      // ...
    }
  }

= How to run: JRuby\n(('note:JRubyでの動かし方'))

  # coderay console
  % javac Fibonacci.java
  % jar cf fibonacci.jar Fibonacci.class

= How to run: JRuby\n(('note:JRubyでの動かし方'))

  # coderay ruby
  require "fibonacci.jar"
  java_import "Fibonacci"
  p Fibonacci.new.compute(100)

= Based on not C: Pros1\n(('note:C言語以外をベースにする：長所1'))

(('tag:center'))
Easy to write than C\n
(('note:Cより書きやすい'))

  * Simpler syntax\n
    (('note:洗練された構文'))
  * Rich features than C\n
    (('note:Cより機能が多い'))

= Based on not C: Pros2\n(('note:C言語以外をベースにする：長所2'))

(('tag:center'))
Can use libraries in base language\n
(('note:ベース言語のライブラリーを使える'))

  * Major languages have many libraries\n
    (('note:広く使われている言語はライブラリーも多い'))

= Based on not C: Cons1\n(('note:C言語以外をベースにする：短所1'))

(('tag:center'))
Need base language knowledge\n
(('note:ベース言語の知識が必要'))

  * Java for JRuby(('note:（JRubyならJava）'))
  * Rust for Helix(('note:（HelixならRust）'))

= Based on not C: Cons2\n(('note:C言語以外をベースにする：短所2'))

(('tag:center'))
May need C knowledge\n
(('note:(When Ruby implementation is MRI)'))\n
(('note:Rubyの実装がMRIならCの知識が必要かもしれない'))

  * Base language wraps Ruby C API\n
    (('note:ベースの言語はRubyのC APIをラップしている'))
    * e.g.: (({sys::RSTRING_PTR})) on Helix\n
      (('note:例：Helixならsys::RSTRING_PTRがラップしたAPI'))

= Based on not C: Cons3\n(('note:C言語以外をベースにする：短所3'))

(('tag:center'))
May need many works to maintain\n
(('note:(When Ruby implementation is MRI)'))\n
(('note:Rubyの実装がMRIならメンテナンスが大変かも'))

  * Ruby introduces a new API then base language may need to implement it\n
    (('note:Rubyが新しいAPIを追加→ベース言語でも実装？'))
    * e.g.: (({rb_gc_adjust_memory_usage()}))

= Provide convenient API\n(('note:便利なAPIを提供'))

  * Rice: C++ + Ruby
  * Ext++: C++ + Ruby
  * Boost.Python: C++ + Python
  * pybind11: C++11 + Python

= How to run: Rice\n(('note:Riceの動かし方'))

  # coderay cpp

  #include <rice/Class.hpp>

  static const char * // Not VALUE!
  rb_sample_hello(Rice::Object self) {
    return "Hello";
  }
  extern "C" void Init_sample() {
    Rice::define_class("Sample").
      define_method("hello", &rb_sample_hello);
  }

= How to run: Rice\n(('note:Riceの動かし方'))

  # coderay ruby

  # extconf.rb
  require "mkmf-rice"
  create_makefile("sample")

= How to run: Rice\n(('note:Riceの動かし方'))

  # coderay console

  % ruby extconf.rb
  % make

= How to run: Rice\n(('note:Riceの動かし方'))

  # coderay ruby

  require_relative "sample.so"
  p Sample.new.hello
  # => "Hello"

= Provide C++ API: Pros1\n(('note:C++ APIを提供：長所1'))

(('tag:center'))
Easy to write than C\n
(('note:Cより書きやすい'))

  * Auto type conversion\n
    (('note:型の自動変換'))
  * Auto exception conversion\n
    (('note:例外の自動変換'))

= Provide C++ API: Pros2\n(('note:C++ APIを提供：長所2'))

(('tag:center'))
Easy to maintain\n
(('note:(For maintainers, not for users)'))\n
(('note:（ユーザーではなくメンテナーが）メンテナンスしやすい'))

  * Can use C directly incl macro\n
    (('note:マクロも含めてCの機能を直接使える'))
  * Don't need wrapper for C API\n
    (('note:(Wrapped API may be useful)'))\n
    (('note:C APIをラップすると便利だろうけどラップしなくてもよい'))

= Provide C++ API: Pros3\n(('note:C++ APIを提供：長所3'))

(('tag:center'))
Easy to debug\n
(('note:if you have C knowledge'))\n
(('note:Cの知識があるならデバッグしやすい'))

  * Can use GDB/LLDB directly\n
    (('note:GDB/LLDBを直接使える'))
    * GDB/LLDB have built-in C++ support\n
      (('note:GDB/LLDBは組み込みでC++をサポート'))

= Provide C++ API: Cons1\n(('note:C++ APIを提供：短所1'))

(('tag:center'))
Require C and C++ knowledge\n
(('note:CとC++の知識が必要'))

  * Many Rubyists don't have\n
    (('note:多くのRubyistは両方は知らない'))

= Provide C++ API: Cons2\n(('note:C++ APIを提供：短所2'))

(('tag:center'))
C++ is difficult\n
(('note:C++は難しい'))

  * e.g.: Template\n
    (('note:たとえばテンプレート'))

= Provide C++ API: Cons3\n(('note:C++ APIを提供：短所3'))

(('tag:center'))
Slower build\n
(('note:ビルドが遅い'))

= Provide C++ API: Cons4\n(('note:C++ APIを提供：短所4'))

(('tag:center'))
Conv from Ruby may be a bother\n
(('note:Ruby実装の移植が面倒'))

  * C++ with convenient Ruby C API needs more codes than Ruby\n
    (('note:RubyのC APIにC++の便利APIがあってもRubyよりもたくさんコードが必要'))

= From Ruby: Rice\n(('note:RubyからRiceに移植'))

  # coderay ruby
  def fib(n)
    prev = 1
    current = 1
    1.step(n - 1).collect do
      prev, current = current, current + prev
      prev
    end
  end

= From Ruby: Rice\n(('note:RubyからRiceに移植'))

  # coderay cpp
  std::vector<uint64_t> fib(Rice::Object self, int n) {
    uint64_t prev = 1, current = 1;
    std::vector<uint64_t> numbers;
    for (int i = 1; i < n; ++i) {
      auto temp = current; current += prev; prev = temp;
      numbers.push_back(prev);
    }
    return numbers;
  }

