= Improve extension API

: subtitle
   C++ as better language for extension
: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2017
: date
   2017-09-18
: allotted-time
   35m
: theme
   .

= Extension

  * Ruby library implemented in C
    * Or in other languages such as\n
      C++ and Objective-C

= Ruby API

  # coderay ruby

  class Sample
    def hello
      "Hello"
    end
  end

= C API

  # coderay c

  #include <ruby.h>

  static VALUE
  rb_sample_hello(VALUE self)
  {
    return rb_str_new_static("Hello");
  }

  void
  Init_sample(void)
  {
    VALUE sample = rb_define_class("Sample", rb_cObject);
    rb_define_method(sample, "hello", rb_sample_hello, 0);
  }

= C++ API

  # coderay cpp

  #include <ruby.hpp>

  void
  Init_sample(void)
  {
    rb::Class("Sample", rb_cObject).
      define_method("hello",
                    [](VALUE self) {
                      return rb_str_new_static("Hello");
                    });
  }

= Ruby API\nwithout syntax sugar

  # coderay ruby

  Sample = Class.new do
    define_method(:hello) do
      "Hello"
    end
  end

= C++ API (reprise)

  # coderay cpp

  // Similar to Ruby API without syntax sugar!
  rb::Class("Sample", rb_cObject).
    define_method("hello",
                  [](VALUE self) {
                    return rb_str_new_static("Hello");
                  });

= Why is extension needed?

  * Performance
  * Integration with existing libraries implemented in other languages such as C and C++
    * It's called as binding

= Performance

  * Extension is fast
    * Because C/C++ is fast
    * Especially loop

= Loop: Sum

  numbers = (1..100000).to_a
  # Ruby level loop
  numbers.inject(&:+)
  # C level loop
  numbers.sum

= Target use case

  * Mostly write your script in Ruby
  * Implement only bottle neck as extension

= e.g.: Machine Learning

  * ...

= Writing ext is difficult

  * Require C knowledge
  * Require Ruby C API knowledge
  * Require how to write extension knowledge

Most Rubyists don't have them

= I don't want to learn...

You should learnüëê\n
(('note:(if you want more performance)'))

# üéí
# üè´

= Easy to write ext

  * Assumptions
    * Ruby knowledge
    * Ruby C API knowledge
  * Improve Ruby C API
    * Ruby C API isn't bad but has some verbosities because of C

= Approach

  * Extend language
    * Ruby + Œ± syntax
  * Based on not C
  * Provide convenient API
    * Enhance C API

= Extend language

  * Rubex: Extended Ruby
  * Cython: Extended Python

= Based on not C language

  * JRuby: Java + Ruby
  * Helix: Rust + Ruby
  * crystal_ruby: Crystal + Ruby

= Provide convenient API

  * Rice: C++ + Ruby
  * Extpp: C++ + Ruby
  * Boost.Python: C++ + Python
  * pybind11: C++11 + Python
